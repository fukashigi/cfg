# .zshrc
# mel boyce <mel@melboyce.com>

CACHEDIR=~/.cache/zsh
mkdir -p $CACHEDIR
TMP="$HOME/tmp"
mkdir -p $TMP
HOSTNAME="`hostname`"


### let's go
bindkey -e  # emacs/readline chords
umask 022

# turn off flow control via stty
stty start undef
stty stop undef


### parameters and exports
# exports
export PAGER="most"
export EDITOR="nvim"
export GREP_COLOR='31'
export GREP_OPTIONS='--color=auto'
export MOST_EDITOR="nvim %s +%d"
export PATH="$PATH:$HOME/bin"
export PS_FORMAT="pid,user,group,nice,pri,psr,ppid,start,rss,stat,command"
export SUDO_EDITOR="rvim"  # no shell commands, no suspend
export TMP="$TMP"
export TEMP="$TMP"
export TMPDIR="$TMP"

# shell parameters
DIRSTACKSIZE=9          # how many entries in the dirstack
HISTFILE=~/.histfile    # where to store history
HISTSIZE=100000         # number of items stored in the internal history list
LISTMAX=0               # ask for completions only if list will scroll
MAILCHECK=0             # don't check for mail
REPORTTIME=10           # show execution report on processes that take over 10s
SAVEHIST=$HISTSIZE      # number of history events to save in HISTFILE
TMPPREFIX="$TMP"        # where to put temporary files
WATCH="notme"           # watch for logins from 'notme'
WATCHFMT="%D %T %b%n%b %a %l from %m"


### options
# dir stack persistence
DIRSTACKFILE=$CACHEDIR/dirstack
if [[ -f $DIRSTACKFILE ]]; then
    dirstack=( ${(f)"$(< $DIRSTACKFILE)"} )
    [[ -d $dirstack[1] ]] && cd $dirstack[1] && cd $OLDPWD
fi
chpwd() {
    print -l $PWD ${(u)dirstack} >| $DIRSTACKFILE
}

# changing directories
setopt auto_pushd               # cd pushes to dir stack
setopt pushd_minus              # inverts meaning of + and - for cd/pushd/popd
setopt pushd_silent             # doesn't print the stack post manipulation
setopt pushd_to_home            # pushes ~ onto the stack
setopt pushd_ignore_dups        # ignore duplicate pushes

# completion
setopt auto_param_slash         # add trailing slash to completions that are dirs
setopt complete_in_word         # complete from both ends of words
setopt hash_list_all            # hash command path before completion
setopt list_types               # trail completions with identifying mark

# expansion and globbing
setopt bad_pattern              # print errors for bad patterns
setopt equals                   # =COMMAND expands to full path of COMMAND
setopt extended_glob            # #~^ are pattern chars
setopt no_glob_dots             # globs don't match dotfiles
setopt nonomatch                # bash-style no glob match behaviour (supress no-match error)

# history
setopt extended_history         # saves timestamps and runtime info
setopt hist_allow_clobber       # > and >> become >! and >>! in hist
setopt hist_expire_dups_first   # purge duplicates first
# setopt hist_fcntl_lock          # use fcntl for locking the history file (as opposed to ad-hoc locking)
setopt hist_ignore_all_dups     # unique history items only
setopt hist_ignore_space        # don't add lines that start with a space
setopt hist_reduce_blanks       # remove superfluous spaces from history entries
setopt inc_append_history       # add to history file incrementally (rather than at shell exit)
setopt share_history            # shares history across sessions

# input/output
setopt noclobber                # do not truncate existing files via redirects
setopt noflowcontrol            # disable start/stop tty doodads (^S/^Q)
setopt interactive_comments     # allow comments in interactive sessions

# job control
setopt long_list_jobs           # list jobs in the long format
setopt nohup                    # don't send HUP to background jobs on shell exit
setopt notify                   # report status of background jobs immediately

# prompting
setopt prompt_subst             # do expansion and substitution in prompts

# zle
setopt beep                     # beep on error in zle



### autoloads, modules, and widgets
# colors
autoload -U colors zsh/terminfo
colors

# automatically quote unsafe chars in URLs
autoload -U url-quote-magic
zle -N self-insert url-quote-magic

# rename files; hardcore mode - examples: http://strcat.de/zsh/#zmv
autoload -Uz zmv

# schedule a command: sched [+]HH:MM COMMAND ...
autoload -Uz zsh/sched

# more than just spaces
autoload -U select-word-style
select-word-style bash

# add strftime builtin
zmodload zsh/datetime

# run-help: esc+h => in-line man page
autoload run-help


### aliases

# commands
alias dfl="df -hl --exclude tmpfs --exclude devtmpfs --total"
alias dh="dirs -v"
alias dt="tree -CFd"
alias g="grep -nH --color=auto"
alias h="history"
alias http="http --style monokai"
alias j="jobs"
alias killall="pkill"  # just in case i'm on a "real" unix
alias l.="ls -d .[^.]*"
alias ls="ls --color=auto --group-directories-first --classify --time-style='+%Y-%m-%d %H:%M' --human-readable -X"
alias pr2="bpython2"
alias pr="bpython"
alias psa="ps --forest -e --sort uid"
alias psc="ps xawf -eo pid,user,cgroup,args"
alias pstree="pstree -A"
alias s="ssh -4"
alias sls="salt"
alias spm="pacman"
alias tf="tail -f"
alias tree="tree -CF"
alias vs="vim -S ~/.vim/sessions/"
alias watch="watch --color"

# systemd
alias cg="systemd-cgls --no-pager"
alias jc="journalctl --no-pager"
alias jf="journalctl -fa --no-pager"
alias lc="loginctl --no-pager"
alias sc="systemctl --no-pager"
alias scdr="systemctl --system daemon-reload"

# sudo aliases
if (( EUID > 0 )); then
    alias lc="sudo loginctl --no-pager"
    alias sc="sudo systemctl --no-pager"
    alias scdr="sudo systemctl --system daemon-reload"
    alias sls="sudo salt"
    alias spm="sudo pacman"
    alias spme="sudo -E pacman"
    alias spsi="sudo python2 setup.py install"
fi

# globals
alias -g A="|ag"
alias -g C="|wc -l"
alias -g G="|grep"
alias -g H="|head"
alias -g P="|$PAGER"
alias -g Q="&> /dev/null"
alias -g S="|sort"
alias -g SPR="|curl -F 'sprunge=<-' http://sprunge.us"
alias -g T="|tail"
alias -g VL="/var/log/"
alias -g VLE=/var/log/everything.log
alias -g VLNA=/var/log/nginx/access.log
alias -g VLNE=/var/log/nginx/error.log



### completion
# load completions
autoload -U compinit
zmodload zsh/complist
compinit -d $CACHEDIR/zcompdump

_force_rehash() {
  (( CURRENT == 1 )) && rehash
  return 1
}

zstyle ':completion:::::' completer _force_rehash _complete
zstyle -e ':completion:*:approximate:*' max-errors 'reply=( $(( ($#PREFIX + $#SUFFIX) / 3 )) )'
zstyle ':completion:*' cache-path $CACHEDIR
zstyle ':completion:*' use-cache on
zstyle ':completion:*' force-list always
zstyle ':completion:*:*:*:*:processes' force-list always
zstyle ':completion:*:*:*:*:processes' command "ps a -o pid,user,comm,command -w -w"
zstyle ':completion:*:kill:*' menu yes select
zstyle ':completion:*:kill:*:processes' list-colors "=(#b) #([0-9]#) #([a-z]#)*=37=31=33"
zstyle ':completion:*:corrections' format "- %d - (errors %e})"
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*:descriptions' format "- %d -"
zstyle ':completion:*:kill:*' force-list always
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true
zstyle ':completion:*:default' list-colors 'di=1;34'



### abbreviations
typeset -Ag abbreviations
abbreviations=(
  "Ia"    "| awk"
  "Ig"    "| grep"
  "Iag"   "| ag"
  "Ip"    "| $PAGER"
  "Ih"    "| head"
  "It"    "| tail"
  "Is"    "| sort"
  "Iw"    "| wc"
  "Ix"    "| xargs"
)

magic-abbrev-expand() {
    local MATCH
    LBUFFER=${LBUFFER%%(#m)[_a-zA-Z0-9]#}
    LBUFFER+=${abbreviations[$MATCH]:-$MATCH}
    zle self-insert
}

no-magic-abbrev-expand() {
  LBUFFER+=' '
}

zle -N magic-abbrev-expand
zle -N no-magic-abbrev-expand
bindkey " " magic-abbrev-expand
bindkey "^x " no-magic-abbrev-expand
bindkey -M isearch " " self-insert


### prompt
# hostname
case "$HOSTNAME" in
    eden|winterfell)
        HOSTCOLOR="%{$fg[magenta]%}"
        ;;
    mel??????l?|syd??????l?)
        HOSTCOLOR="%{$fg_bold[red]%}"
        ;;
    husker)
        HOSTCOLOR="%{$fg_bold[green]%}"
        ;;
    *)
        HOSTCOLOR="%{$fg_bold[cyan]%}"
        ;;
esac

# path
PATHCOLOR="%{$fg_bold[yellow]%}"
PATHPROMPT="${PATHCOLOR}%30<...<%~%{$reset_color%}"

# user@host
USERCOLOR="%{$fg[yellow]%}"
ROOTCOLOR="%{$fg_bold[red]%}"
HPROMPT="${HOSTCOLOR}${HOSTNAME}%{$reset_color%}"
UHPROMPT="%(!.$ROOTCOLOR.$USERCOLOR)%n%{$fg_bold[black]%}@$HPROMPT"

# jobs are running
JOBSPRE="%{$fg_bold[black]%}j%{$reset_color%}"
JOBSCOLOR="%{$fg[cyan]%}"
JOBSPROMPT="%(1j. $JOBSPRE$JOBSCOLOR%j.)%{$reset_color%}"

# non-zero exit
EXITCOLOR="%{$fg_bold[red]%}"
EXITPRE="%{$fg_bold[black]%}e%{$reset_color%}"
EXITPROMPT="%(?.. $EXITPRE$EXITCOLOR%?)%{$reset_color%}"

# the prompts
PS1='$UHPROMPT $PATHPROMPT '
if [[ `whoami` == "mel" ]]; then
    if [[ $HOSTNAME == "eden" ]]; then
        PS1='$PATHPROMPT '
    else
        PS1='$HPROMPT $PATHPROMPT '
    fi
fi
PS2='%{$fg_bold[blue]%}%_%{$reset_color%} %{$fg_bold[black]%}>>%{$reset_color%} '
RPROMPT=' $JOBSPROMPT$EXITPROMPT'
# PS1="%{$fg_bold[yellow]%}%30<...<%~%{$reset_color%} "



### functions
pull() {
    if [[ -d .hg ]]; then
        hg pull && hg up
    elif [[ -d .git ]]; then
        git pull
    else
        echo "nup"
    fi
}
push() {
    if [[ -d .hg ]]; then
        hg push
    elif [[ -d .git ]]; then
        git push
    else
        echo "nup"
    fi
}
zman() { PAGER="less -g -s '+/^       "$1"'" man zshall }
px() { ps uwwp ${$(pgrep -d, "${(j:|:)@}"):?no matches} }
hl() { egrep --color=always -e '' -e${^*} }
mkcd() { mkdir -p "$1" && cd "$1" }
compdef mkcd=mkdir  # completions work like mkdir
pstop() { ps -eo pid,user,pri,ni,vsz,rsz,stat,pcpu,pmem,time,comm --sort -pcpu | head -11 }


### misc.
# move cursor to tail of first word
after-first-word() {
    zle beginning-of-line
    zle forward-word
}
zle -N after-first-word
bindkey "^X1" after-first-word



### keyboard malarkey
autoload zkbd
typeset -g -A key

key[F1]='^[[11~'
key[F2]='^[[12~'
key[F3]='^[[13~'
key[F4]='^[[14~'
key[F5]='^[[15~'
key[F6]='^[[17~'
key[F7]='^[[18~'
key[F8]='^[[19~'
key[F9]='^[[20~'
key[F10]='^[[21~'
key[F11]='^[[23~'
key[F12]='^[[24~'
key[Backspace]='^?'
key[Insert]='^[[2~'
key[Home]='^[[7~'
key[PageUp]='^[[5~'
key[Delete]='^[[3~'
key[End]='^[[8~'
key[PageDown]='^[[6~'
key[Up]='^[[A'
key[Left]='^[[D'
key[Down]='^[[B'
key[Right]='^[[C'
key[Menu]=''''

[[ -n ${key[Left]}      ]] && bindkey "${key[Left]}"      backward-char
[[ -n ${key[Right]}     ]] && bindkey "${key[Right]}"     forward-char
[[ -n ${key[Up]}        ]] && bindkey "${key[Up]}"        up-line-or-history
[[ -n ${key[Down]}      ]] && bindkey "${key[Down]}"      down-line-or-history
[[ -n ${key[Home]}      ]] && bindkey "${key[Home]}"      beginning-of-line
[[ -n ${key[End]}       ]] && bindkey "${key[End]}"       end-of-line
[[ -n ${key[PageUp]}    ]] && bindkey "${key[PageUp]}"    history-beginning-search-backward
[[ -n ${key[PageDown]}  ]] && bindkey "${key[PageDown]}"  history-beginning-search-forward
[[ -n ${key[Delete]}    ]] && bindkey "${key[Delete]}"    delete-char
[[ -n ${key[Backspace]} ]] && bindkey "${key[Backspace]}" backward-delete-char



### colorize stderr (red)
# plays funky with pacman's "proceed with installation prompt"
# sm_color_red="$(tput setaf 1)"
# sm_color_reset="$(tput sgr0)"
# exec 2>>( awk '{print "'"$sm_color_red"'"$0"'"$sm_color_reset"'"}' >&2 & )



### local config
[[ -f ~/.config/zsh/$HOSTNAME.sh ]] && source ~/.config/zsh/$HOSTNAME.sh
(( $+commands[aws_zsh_completer.sh] )) && source =aws_zsh_completer.sh



### done
fortune -a
