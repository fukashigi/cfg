# kakrc

# init
set -add global ui_options terminal_assistant=cat
set -add global ui_options terminal_enable_mouse=false

## regular options
set global indentwidth 4
set global tabstop 4
set global scrolloff 10,1


# color
colorscheme palenight


# user
map global user = '<a-i>w:spell-replace<ret>' -docstring 'spell replace word'
map global user ] ':spell-next<ret>' -docstring 'next spelling error'
map global user c ':comment-line<ret>' -docstring 'comment toggle selected lines'
map global user b ':bn<ret>' -docstring 'next buffer'
map global user B ':bp<ret>' -docstring 'previous buffer'
map global user l ':lint-next-error<ret>' -docstring 'next lint error'
map global user L ':lint-previous-error<ret>' -docstring 'previous lint error'
map global user q ':delete-buffer<ret>' -docstring 'delete buffer'

## external commands
map global user f '|fmt -w 80<ret>' -docstring '|fmt -w 80'
map global user s '|sort -bn<ret>' -docstring '|sort -bn'
map global user p '<a-!>pbpaste<ret>' -docstring 'append from general clipboard'
map global user P '!pbpaste<ret>' -docstring 'insert from general clipboard'
map global user r '|pbpaste<ret>' -docstring 'replace with general clipboard'


# hooks
hook global WinCreate .* %{
    add-highlighter window/ number-lines -hlcursor -separator ' | '
    add-highlighter window/ show-matching
}
hook global NormalKey y|d|c %{ nop %sh{ printf %s "$kak_reg_dquote" | pbcopy }}
hook global InsertChar \t %{ exec -draft h@ } # convert tabs to spaces


# lsp
eval %sh{kak-lsp --kakoune -s $kak_session}
# lsp-enable


# filetypes

## go
hook global WinCreate .*\.go %{
    lsp-enable-window

    hook buffer BufWritePre .* format
    hook buffer BufWritePost .* lint

    set window indentwidth 0
    set window tabstop 8
    set window lintcmd revive
    set window formatcmd goimports
    set window makecmd 'go build -x'

    map window user , ':lsp-hover<ret>' -docstring 'show hover'
    map window user e ':lsp-find-error<ret>:lsp-hover<ret>' -docstring 'find error'
    map window user E ':lsp-find-error --previous<ret>:lsp-hover<ret>' -docstring 'find error (prev)'
    map window user f ':lsp-next-function<ret>' -docstring 'next function'
    map window user F ':lsp-previous-function<ret>' -docstring 'prev function'
    map window user i ':lsp-incoming-calls<ret>' -docstring 'incoming calls'
    map window user I ':lsp-outgoing-calls<ret>' -docstring 'outgoing calls'
    map window user j ':lsp-definition<ret>' -docstring 'go to definition'
    map window user n ':lsp-rename-prompt<ret>' -docstring 'rename symbol'
}

## shell
hook global WinCreate .*\.sh %{
    set window lintcmd 'shellcheck -fgcc -Cnever'
    hook buffer BufWritePost .* lint
}

## markdown
hook global WinCreate .*\.md %{
    add-highlighter global/ wrap
    hook buffer BufWritePost .* spell
}

## python
hook global WinCreate .*\.py %{
    set window lintcmd 'flake8'
    hook buffer BufWritePost .* lint
}

## yaml
hook global WinCreate .*\.yml %{
    set window indentwidth 2
    set window tabstop 2
    set window lintcmd 'yamllint -f parsable'
    hook buffer BufWritePost .* lint
}
